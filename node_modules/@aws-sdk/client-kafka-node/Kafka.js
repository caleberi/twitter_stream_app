"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var KafkaClient_1 = require("./KafkaClient");
var CreateClusterCommand_1 = require("./commands/CreateClusterCommand");
var CreateConfigurationCommand_1 = require("./commands/CreateConfigurationCommand");
var DeleteClusterCommand_1 = require("./commands/DeleteClusterCommand");
var DescribeClusterCommand_1 = require("./commands/DescribeClusterCommand");
var DescribeClusterOperationCommand_1 = require("./commands/DescribeClusterOperationCommand");
var DescribeConfigurationCommand_1 = require("./commands/DescribeConfigurationCommand");
var DescribeConfigurationRevisionCommand_1 = require("./commands/DescribeConfigurationRevisionCommand");
var GetBootstrapBrokersCommand_1 = require("./commands/GetBootstrapBrokersCommand");
var ListClusterOperationsCommand_1 = require("./commands/ListClusterOperationsCommand");
var ListClustersCommand_1 = require("./commands/ListClustersCommand");
var ListConfigurationRevisionsCommand_1 = require("./commands/ListConfigurationRevisionsCommand");
var ListConfigurationsCommand_1 = require("./commands/ListConfigurationsCommand");
var ListNodesCommand_1 = require("./commands/ListNodesCommand");
var ListTagsForResourceCommand_1 = require("./commands/ListTagsForResourceCommand");
var TagResourceCommand_1 = require("./commands/TagResourceCommand");
var UntagResourceCommand_1 = require("./commands/UntagResourceCommand");
var UpdateBrokerStorageCommand_1 = require("./commands/UpdateBrokerStorageCommand");
var UpdateClusterConfigurationCommand_1 = require("./commands/UpdateClusterConfigurationCommand");
var Kafka = /** @class */ (function (_super) {
    tslib_1.__extends(Kafka, _super);
    function Kafka() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Kafka.prototype.createCluster = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new CreateClusterCommand_1.CreateClusterCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.createConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new CreateConfigurationCommand_1.CreateConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.deleteCluster = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteClusterCommand_1.DeleteClusterCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.describeCluster = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DescribeClusterCommand_1.DescribeClusterCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.describeClusterOperation = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DescribeClusterOperationCommand_1.DescribeClusterOperationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.describeConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DescribeConfigurationCommand_1.DescribeConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.describeConfigurationRevision = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DescribeConfigurationRevisionCommand_1.DescribeConfigurationRevisionCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.getBootstrapBrokers = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetBootstrapBrokersCommand_1.GetBootstrapBrokersCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.listClusterOperations = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListClusterOperationsCommand_1.ListClusterOperationsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.listClusters = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListClustersCommand_1.ListClustersCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.listConfigurationRevisions = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListConfigurationRevisionsCommand_1.ListConfigurationRevisionsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.listConfigurations = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListConfigurationsCommand_1.ListConfigurationsCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.listNodes = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListNodesCommand_1.ListNodesCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.listTagsForResource = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListTagsForResourceCommand_1.ListTagsForResourceCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.tagResource = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.untagResource = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.updateBrokerStorage = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UpdateBrokerStorageCommand_1.UpdateBrokerStorageCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    Kafka.prototype.updateClusterConfiguration = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UpdateClusterConfigurationCommand_1.UpdateClusterConfigurationCommand(args);
        if (typeof cb === "function") {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    return Kafka;
}(KafkaClient_1.KafkaClient));
exports.Kafka = Kafka;
//# sourceMappingURL=Kafka.js.map