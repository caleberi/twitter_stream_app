"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RemoteProviderInit_1 = require("./remoteProvider/RemoteProviderInit");
var httpGet_1 = require("./remoteProvider/httpGet");
var ImdsCredentials_1 = require("./remoteProvider/ImdsCredentials");
var retry_1 = require("./remoteProvider/retry");
var property_provider_1 = require("@aws-sdk/property-provider");
/**
 * Creates a credential provider that will source credentials from the EC2
 * Instance Metadata Service
 */
function fromInstanceMetadata(init) {
    var _this = this;
    if (init === void 0) { init = {}; }
    var _a = RemoteProviderInit_1.providerConfigFromInit(init), timeout = _a.timeout, maxRetries = _a.maxRetries;
    return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var profile;
        var _this = this;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, retry_1.retry(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, requestFromEc2Imds(timeout)];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    }); }); }, maxRetries)];
                case 1:
                    profile = (_a.sent()).trim();
                    return [2 /*return*/, retry_1.retry(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var credsResponse, _a, _b;
                            return tslib_1.__generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _b = (_a = JSON).parse;
                                        return [4 /*yield*/, requestFromEc2Imds(timeout, profile)];
                                    case 1:
                                        credsResponse = _b.apply(_a, [_c.sent()]);
                                        if (!ImdsCredentials_1.isImdsCredentials(credsResponse)) {
                                            throw new property_provider_1.ProviderError("Invalid response received from instance metadata service.");
                                        }
                                        return [2 /*return*/, ImdsCredentials_1.fromImdsCredentials(credsResponse)];
                                }
                            });
                        }); }, maxRetries)];
            }
        });
    }); };
}
exports.fromInstanceMetadata = fromInstanceMetadata;
var IMDS_IP = "169.254.169.254";
var IMDS_PATH = "latest/meta-data/iam/security-credentials";
function requestFromEc2Imds(timeout, path) {
    return httpGet_1.httpGet({
        host: IMDS_IP,
        path: "/" + IMDS_PATH + "/" + (path ? path : ""),
        timeout: timeout
    }).then(function (buffer) { return buffer.toString(); });
}
//# sourceMappingURL=fromInstanceMetadata.js.map