"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var MiddlewareStack = /** @class */ (function () {
    function MiddlewareStack() {
        this.entries = [];
        this.sorted = true;
    }
    MiddlewareStack.prototype.add = function (middleware, options) {
        if (options === void 0) { options = {}; }
        var _a = options.step, step = _a === void 0 ? "initialize" : _a, _b = options.priority, priority = _b === void 0 ? 0 : _b, tags = options.tags;
        this.sorted = false;
        this.entries.push({
            middleware: middleware,
            priority: priority,
            step: step,
            tags: tags
        });
    };
    MiddlewareStack.prototype.clone = function () {
        var _a;
        var clone = new MiddlewareStack();
        (_a = clone.entries).push.apply(_a, this.entries);
        clone.sorted = this.sorted;
        return clone;
    };
    MiddlewareStack.prototype.concat = function (from) {
        var _a;
        var clone = new MiddlewareStack();
        (_a = clone.entries).push.apply(_a, this.entries.concat(from.entries));
        clone.sorted = false;
        return clone;
    };
    MiddlewareStack.prototype.remove = function (toRemove) {
        var length = this.entries.length;
        if (typeof toRemove === "string") {
            this.removeByTag(toRemove);
        }
        else {
            this.removeByIdentity(toRemove);
        }
        return this.entries.length < length;
    };
    MiddlewareStack.prototype.filter = function (callbackfn) {
        var filtered = new MiddlewareStack();
        for (var _i = 0, _a = this.entries; _i < _a.length; _i++) {
            var entry = _a[_i];
            var options = {
                step: entry.step,
                priority: entry.priority,
                tags: tslib_1.__assign({}, entry.tags)
            };
            if (callbackfn(options)) {
                filtered.entries.push(entry);
            }
        }
        filtered.sorted = this.sorted;
        return filtered;
    };
    MiddlewareStack.prototype.resolve = function (handler, context) {
        if (!this.sorted) {
            this.sort();
        }
        for (var _i = 0, _a = this.entries; _i < _a.length; _i++) {
            var middleware = _a[_i].middleware;
            handler = middleware(handler, context);
        }
        return handler;
    };
    MiddlewareStack.prototype.removeByIdentity = function (toRemove) {
        for (var i = this.entries.length - 1; i >= 0; i--) {
            if (this.entries[i].middleware === toRemove) {
                this.entries.splice(i, 1);
            }
        }
    };
    MiddlewareStack.prototype.removeByTag = function (toRemove) {
        for (var i = this.entries.length - 1; i >= 0; i--) {
            var tags = this.entries[i].tags;
            if (tags && toRemove in tags) {
                this.entries.splice(i, 1);
            }
        }
    };
    MiddlewareStack.prototype.sort = function () {
        this.entries.sort(function (a, b) {
            var stepWeight = stepWeights[a.step] - stepWeights[b.step];
            return stepWeight || a.priority - b.priority;
        });
        this.sorted = true;
    };
    return MiddlewareStack;
}());
exports.MiddlewareStack = MiddlewareStack;
var stepWeights = {
    initialize: 4,
    serialize: 3,
    build: 2,
    finalize: 1
};
//# sourceMappingURL=index.js.map